"""
e.g.

사용자 1, 2에 대해
    - 1은 40%이상 할인하는 이모티콘을 모두 구매 / 토탈 구매 비용이 10000원 이상이라면 구매가 아닌 구독을 진행
    - 2는 25%이상 할인하는 이모티콘을 모두 구매 / 토탈 구매 비용이 10000원 이상이라면 구매가 아닌 구독을 진행
이 떄, 아래 예시를 보면
    1. 
    - 이모티콘 1: 7000 / 이모티콘 2: 9000 에 대해, 둘 다 할인율 40%
    - 사용자 1은 모두 구매 / 사용자 2도 모두 구매 -> 각각 9600, 9600원 지불 -> 10000원 이하이므로 구독은 안함
    
    2. 
    - 이모티콘 1: 7000 / 이모티콘 2: 9000에 대해, 각각 할인율 30%, 40%
    - 사용자 1은 이모티콘 2만 구매 / 사용자 2는 둘 다 구매 -> 각각 5400, 10300원 지불 -> 사용자 2는 구독
    
    
변수설명
users: [[40, 10000], [25, 10000], ...] 각 사용자의 할인율과 구독기준비용 / users[i]는 사용자 i+1의 정보를 의미
emoticons: [7000, 9000, ..] 각 이모티콘의 비용
n: 유저 명수 (1 <= <= 100)
m: 이모티콘 개수 (1 <= <= 7)

반환해야하는것: (행사 목적을 최대한으로 달성했을 떄의)구독자 수와 이모티콘 매출액
    행사 목적을 최대한으로 달성하는 것: 
        1. 구독자를 최대한 늘리는것 (우선순위)
        2. 이모티콘 판매액을 최대한 늘리는것
        각 이모티콘의 할인율은 10, 20, 30, 40% -> 이모티콘마다 다름
        
풀이 방식:
    할인율 맵을 만들고, 각각의 할인율에 대해 [구독자수, 판매금액] 을 담아놓고 나중에 정렬시켜본다
    e.g. [7000, 9000] 4^2가지 -> 이모티콘 개수가 7개라면, 4^7(2^14)가지
    40, 40
    30, 40
    20, 40
    10, 40
    
    40, 30
    30, 30
    20, 30
    10, 30
    
    40, 20
    30, 20
    20, 20
    10, 20
    
    40, 10
    30, 10
    20, 10
    10, 10
"""

def solution(users, emoticons):
    answers = []
    

# Test
print(solution([[40, 10000], [25, 10000]], [7000, 9000])) # [1, 5400]
print(solution([[40, 2900], [23, 10000], [11, 5200], [5, 5900], [40, 3100], [27, 9200], [32, 6900]], [1300, 1500, 1600, 4900])) # [4, 13860]



